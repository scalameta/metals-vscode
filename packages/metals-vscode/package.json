{
  "name": "metals",
  "displayName": "Scala (Metals)",
  "description": "Scala language server with rich IDE features",
  "keywords": [
    "scala",
    "lsp",
    "language server",
    "ide",
    "scalameta"
  ],
  "version": "1.24.5",
  "publisher": "scalameta",
  "contributors": [
    {
      "name": "Alexey Alekhin",
      "url": "https://github.com/laughedelic"
    },
    {
      "name": "Gabriele Petronella",
      "url": "https://github.com/gabro"
    },
    {
      "name": "Ólafur Páll Geirsson",
      "url": "https://github.com/olafurpg"
    }
  ],
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/scalameta/metals-vscode/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/scalameta/metals-vscode.git"
  },
  "homepage": "https://scalameta.org/metals/",
  "engines": {
    "vscode": "^1.59.0"
  },
  "icon": "images/logo.png",
  "categories": [
    "Programming Languages",
    "Debuggers"
  ],
  "activationEvents": [
    "onCommand:metals.start-server",
    "onCommand:metals.new-scala-project",
    "onDebugResolve:scala",
    "onLanguage:scala",
    "workspaceContains:build.sbt",
    "workspaceContains:build.sc",
    "workspaceContains:project/build.properties",
    "workspaceContains:project.scala",
    "workspaceContains:.scala-build",
    "workspaceContains:src/main/scala",
    "workspaceContains:*/src/main/scala",
    "workspaceContains:*/*/src/main/scala"
  ],
  "contributes": {
    "languages": [
      {
        "id": "javap-verbose",
        "extensions": [
          ".javap-verbose"
        ],
        "icon": {
          "dark": "icons/file_type_java.svg",
          "light": "icons/file_type_java.svg"
        }
      },
      {
        "id": "semanticdb",
        "extensions": [
          ".semanticdb-detailed",
          ".semanticdb-compact"
        ]
      },
      {
        "id": "javap",
        "extensions": [
          ".javap"
        ],
        "icon": {
          "dark": "icons/file_type_java.svg",
          "light": "icons/file_type_java.svg"
        }
      },
      {
        "id": "java",
        "extensions": [
          ".cfr"
        ],
        "icon": {
          "dark": "icons/file_type_java.svg",
          "light": "icons/file_type_java.svg"
        }
      },
      {
        "id": "tasty",
        "aliases": [
          "TASTy",
          "tasty"
        ],
        "extensions": [
          ".tasty-decoded"
        ],
        "icon": {
          "dark": "icons/file_type_scala.svg",
          "light": "icons/file_type_scala.svg"
        }
      },
      {
        "id": "buildtarget",
        "extensions": [
          ".metals-buildtarget"
        ],
        "icon": {
          "dark": "icons/book-dark.svg",
          "light": "icons/book-light.svg"
        }
      },
      {
        "id": "semanticdb",
        "extensions": [
          ".semanticdb",
          ".semanticdb-detailed",
          ".semanticdb-compact",
          ".semanticdb-proto"
        ],
        "icon": {
          "dark": "icons/scalameta-logo.png",
          "light": "icons/scalameta-logo.png"
        }
      }
    ],
    "grammars": [
      {
        "language": "javap-verbose",
        "scopeName": "source.jvm-bytecode-verbose",
        "path": "./syntaxes/jvm-bytecode-verbose.json"
      },
      {
        "language": "javap",
        "scopeName": "source.jvm-bytecode",
        "path": "./syntaxes/jvm-bytecode.json"
      },
      {
        "language": "tasty",
        "scopeName": "source.tasty",
        "path": "./syntaxes/tasty.json"
      },
      {
        "language": "buildtarget",
        "scopeName": "source.buildtarget",
        "path": "./syntaxes/buildtarget.json"
      },
      {
        "language": "semanticdb",
        "scopeName": "source.semanticdb",
        "path": "./syntaxes/semanticdb.json"
      }
    ],
    "configurationDefaults": {
      "[scala]": {
        "editor.suggestSelection": "first",
        "editor.formatOnPaste": true,
        "editor.formatOnType": true
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "metals-explorer",
          "title": "Metals",
          "icon": "images/scalameta.svg"
        },
        {
          "id": "metals-find-in-files",
          "title": "Find in files (Metals)",
          "icon": "$(search)"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "metalsPackages",
        "contents": "No Scala project found. Create a new one or start Metals manually.\n[New Scala project](command:metals.new-scala-project)\n[Start Metals](command:metals.start-server)",
        "when": "!metals:enabled || workbenchState != empty"
      }
    ],
    "views": {
      "metals-find-in-files": [
        {
          "id": "metalsFindInFiles",
          "name": "Find in files (Metals)",
          "when": "metals.showFindInFiles"
        }
      ],
      "metals-explorer": [
        {
          "id": "metalsPackages",
          "name": "Packages"
        },
        {
          "id": "metalsBuild",
          "name": "Build commands"
        },
        {
          "id": "metalsCompile",
          "name": "Ongoing compilations"
        },
        {
          "id": "metalsHelp",
          "name": "Help and feedback"
        }
      ]
    },
    "configuration": {
      "title": "Metals",
      "properties": {
        "metals.serverVersion": {
          "type": "string",
          "default": "1.0.1",
          "markdownDescription": "The version of the Metals server artifact. Requires reloading the window.  \n\n**VS Code extension version is guaranteed to work only with the default version, change if you know what you're doing**"
        },
        "metals.serverProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "-Xmx1G"
          ],
          "markdownDescription": "Optional list of properties to pass along to the Metals server. By default, the environment variable `JAVA_OPTS` and `.jvmopts` file are respected. Each property needs to be a separate item.\n\nExample: `-Dhttps.proxyHost=…`, `-Dhttps.proxyPort=…` or `-Dmetals.statistics=all`"
        },
        "metals.coursierMirror": {
          "type": "string",
          "markdownDescription": "Optional alternative repository to maven central if maven central is not available. For example: `https://jcenter.bintray.com`, which will be used to set to property described [here](https://get-coursier.io/blog/#mirrors)"
        },
        "metals.ammoniteJvmProperties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Optional list of JVM properties to pass along to the Ammonite server. Each property needs to be a separate item.\n\nExample: `-Xmx1G` or `-Xms100M`"
        },
        "metals.excludedPackages": {
          "type": "array",
          "default": [],
          "markdownDescription": "List of packages you'd like to be left out of completions, symbol searches, and code actions.\n\nEx. `akka.actor.typed.javadsl` will ensure nothing in the `javadsl` package gets recommended to you.\n\nYou can find the list of default exclusions [here on the Metals website](https://scalameta.org/metals/docs/editors/user-configuration/#excluded-packages).\n\nIf you need to remove one of the defaults, you can simply include it and preface it with `--`."
        },
        "metals.showInferredType": {
          "type": "string",
          "default": "false",
          "enum": [
            "false",
            "true",
            "minimal"
          ],
          "markdownDescription": "When this option is set to true inferred type in all possible places will be shown. This includes types for values, definitions, cases, type parameters. With 'minimal' option Metals will not show inferred type for type parameters and more complicated pattern matches."
        },
        "metals.showImplicitArguments": {
          "type": "boolean",
          "markdownDescription": "When this option is enabled, for each method that has implicit arguments they are displayed as additional decorations."
        },
        "metals.showImplicitConversionsAndClasses": {
          "type": "boolean",
          "markdownDescription": "When this option is enabled, each implicit method and class is displayed as additional decorations at the usage site."
        },
        "metals.javaHome": {
          "type": "string",
          "scope": "machine-overridable",
          "markdownDescription": "Optional path to the Java home directory. Requires reloading the window.\n\nDefaults to the most recent Java version between 8 and 17 (inclusive) computed by the `locate-java-home` npm package."
        },
        "metals.sbtScript": {
          "type": "string",
          "markdownDescription": "Optional absolute path to an `sbt` executable to use for running `sbt bloopInstall`.\n\nBy default, Metals uses `java -jar sbt-launch.jar` with an embedded launcher while respecting `.jvmopts` and `.sbtopts`.\n\nUpdate this setting if your `sbt` script requires more customizations like using environment variables."
        },
        "metals.millScript": {
          "type": "string",
          "markdownDescription": "Optional absolute path to a `mill` executable to use for running `mill mill.contrib.Bloop/install`.\n\nBy default, Metals uses an embedded `millw` script while respecting `.mill-version` file.\n\nUpdate this setting if your `mill` script requires more customizations."
        },
        "metals.mavenScript": {
          "type": "string",
          "markdownDescription": "Optional absolute path to a `mvn` executable to use for running `mvn ch.epfl.scala:maven-bloop_2.10:<bloop_version>:bloopInstall`.\n\nBy default, Metals uses an embedded `mvnw` script.\n\nUpdate this setting if your `mvn` script requires more customizations."
        },
        "metals.gradleScript": {
          "type": "string",
          "markdownDescription": "Optional absolute path to a `gradle` executable to use for running `gradle bloopInstall`.\n\nBy default, Metals uses an embedded `gradlew` script.\n\nUpdate this setting if your `gradle` script requires more customizations."
        },
        "metals.scalafmtConfigPath": {
          "type": "string",
          "markdownDescription": "Optional custom path to the .scalafmt.conf file.\n\nShould be an absolute path and use forward slashes `/` for file separators (even on Windows)."
        },
        "metals.scalafixConfigPath": {
          "type": "string",
          "markdownDescription": "Optional custom path to the .scalafix.conf file.\n\nShould be an absolute path and use forward slashes `/` for file separators (even on Windows)."
        },
        "metals.scalafixRulesDependencies": {
          "type": "array",
          "scope": "machine",
          "items": {
            "type": "string"
          },
          "markdownDescription": "List of Scalafix rules dependencies in case they are not available by default in Metals and running scalafix fails due to 'rule not found' exception. For example: `com.github.liancheng::organize-imports:0.6.0` which follows the [coursier](https://get-coursier.io/) convention."
        },
        "metals.bloopVersion": {
          "type": "string",
          "scope": "machine",
          "markdownDescription": "This version will be used for the Bloop build tool plugin, for any supported build tool,while importing in Metals as well as for running the embedded server"
        },
        "metals.bloopJvmProperties": {
          "type": "array",
          "scope": "machine",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Optional list of JVM properties to pass along to the Bloop server. Each property needs to be a separate item.\n\nExample: `-Xmx1G` or `-Xms100M`"
        },
        "metals.bloopSbtAlreadyInstalled": {
          "type": "boolean",
          "markdownDescription": "If true, Metals will not generate a `project/metals.sbt` file under the assumption that sbt-bloop is already manually installed in the sbt build. Build import will fail with a 'not valid command bloopInstall' error in case Bloop is not manually installed in the build when using this option."
        },
        "metals.customRepositories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "markdownDescription": "Optional list of custom resolvers passed to Coursier when fetching metals dependencies.\n\nFor documentation on accepted values see the [Coursier documentation](https://get-coursier.io/docs/other-repositories).\n\nThe extension will pass these to Coursier using the COURSIER_REPOSITORIES environment variable after joining the custom repositories with a pipe character (|)."
        },
        "metals.superMethodLensesEnabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable goto super method code lens."
        },
        "metals.enableStripMarginOnTypeFormatting": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "When enabled, if you press the return key from the first line of a multiline string containing a pipe, it will automatically add `.stripMargin`."
        },
        "metals.enableIndentOnPaste": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "When this option is enabled, when user pastes any snippet into a Scala file, Metals will try to adjust the indentation to that of the current cursor."
        },
        "metals.enableSemanticHighlighting": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "When this option is enabled, Metals will provide semantic tokens for clients that support it. The feature is still experimental and does not work for all sources."
        },
        "metals.testUserInterface": {
          "type": "string",
          "default": "Test Explorer",
          "enum": [
            "Test Explorer",
            "Code Lenses"
          ],
          "markdownDescription": "Specifies which UI should be used for tests. `Code lenses` shows virtual text above test class, just like it was previously. `Test explorer` is a new option which shows gutter icons on the left of the file in a less intrusive way. Moreover, this option comes with a new panel called `Testing` which lists all test suites in your codebase and allows you to browse tests and navigate to the file which contains them."
        },
        "metals.fallbackScalaVersion": {
          "type": "string",
          "default": "automatic",
          "enum": [
            "automatic",
            "2.13.11",
            "2.13.10",
            "2.13.9",
            "2.13.8",
            "2.13.7",
            "2.13.6",
            "2.13.5",
            "2.13.4",
            "2.12.18",
            "2.12.17",
            "2.12.16",
            "2.12.15",
            "2.12.14",
            "2.12.13",
            "2.12.12",
            "2.12.11",
            "2.11.12",
            "3.3.0",
            "3.2.2",
            "3.2.1",
            "3.2.0",
            "3.1.3",
            "3.1.2",
            "3.1.1",
            "3.1.0"
          ],
          "markdownDescription": "The Scala compiler version that is used as the default or fallback in case a file doesn't belong to any build target or the specified Scala version isn't supported by Metals.\n\nThis applies to standalone Scala files, worksheets, and Ammonite scripts.\n\n The `automatic` value means that the Scala version for these files will be inferred from the highest supported Scala version in your projects build definition"
        },
        "metals.javaFormat.eclipseConfigPath": {
          "type": "string",
          "markdownDescription": "Optional custom path to the eclipse-formatter.xml file.\n\nShould be an absolute path and use forward slashes `/` for file separators (even on Windows)."
        },
        "metals.javaFormat.eclipseProfile": {
          "type": "string",
          "markdownDescription": "Optional Eclipse format profile to use."
        },
        "metals.scalaCliLauncher": {
          "type": "string",
          "markdownDescription": "Optional path to Scala CLI launcher to use."
        },
        "metals.suggestLatestUpgrade": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Once in a day, notify if there are new server releases (including snapshots)"
        }
      }
    },
    "commands": [
      {
        "command": "metals.reveal-active-file",
        "category": "Metals",
        "title": "Reveal Active File in Side Bar",
        "icon": {
          "light": "icons/focus-light.svg",
          "dark": "icons/focus-dark.svg"
        }
      },
      {
        "command": "metals.restartServer",
        "category": "Metals",
        "title": "Restart server"
      },
      {
        "command": "metals.build-restart",
        "category": "Metals",
        "title": "Restart build server"
      },
      {
        "command": "metals.build-import",
        "category": "Metals",
        "title": "Import build"
      },
      {
        "command": "metals.build-connect",
        "category": "Metals",
        "title": "Connect to build server"
      },
      {
        "command": "metals.build-disconnect",
        "category": "Metals",
        "title": "Disconnect from the build server without restarting"
      },
      {
        "command": "metals.bsp-switch",
        "category": "Metals",
        "title": "Switch build server"
      },
      {
        "command": "metals.generate-bsp-config",
        "category": "Metals",
        "title": "Attempt to generate bsp config for build tool."
      },
      {
        "command": "metals.sources-scan",
        "category": "Metals",
        "title": "Rescan sources"
      },
      {
        "command": "metals.compile-cascade",
        "category": "Metals",
        "title": "Cascade compile"
      },
      {
        "command": "metals.compile-clean",
        "category": "Metals",
        "title": "Recompile workspace"
      },
      {
        "command": "metals.compile-cancel",
        "category": "Metals",
        "title": "Cancel compilation"
      },
      {
        "command": "metals.doctor-run",
        "category": "Metals",
        "title": "Run doctor"
      },
      {
        "command": "metals.zip-reports",
        "category": "Metals",
        "title": "Zip reports"
      },
      {
        "command": "metals.reset-workspace",
        "category": "Metals",
        "title": "Clear caches and reimport project"
      },
      {
        "command": "metals.show-release-notes",
        "category": "Metals",
        "title": "Show release notes"
      },
      {
        "command": "metals.scalafix-run",
        "category": "Metals",
        "title": "Run all Scalafix rules"
      },
      {
        "command": "metals.scalafix-run-only",
        "category": "Metals",
        "title": "Run a single Scalafix rule"
      },
      {
        "command": "metals.show-tasty",
        "category": "Metals",
        "title": "Show decoded TASTy"
      },
      {
        "command": "metals.show-cfr",
        "category": "Metals",
        "title": "Show decompiled with CFR"
      },
      {
        "command": "metals.show-javap",
        "category": "Metals",
        "title": "Show decompiled with javap"
      },
      {
        "command": "metals.show-javap-verbose",
        "category": "Metals",
        "title": "Show decompiled with javap verbose"
      },
      {
        "command": "metals.show-semanticdb-compact",
        "category": "Metals",
        "title": "Show Semanticdb"
      },
      {
        "command": "metals.show-semanticdb-detailed",
        "category": "Metals",
        "title": "Show Semanticdb detailed"
      },
      {
        "command": "metals.show-semanticdb-proto",
        "category": "Metals",
        "title": "Show Semanticdb proto"
      },
      {
        "command": "metals.target-info-display",
        "category": "Metals",
        "title": "Display build target info"
      },
      {
        "command": "metals.new-scala-project",
        "category": "Metals",
        "title": "New Scala Project"
      },
      {
        "command": "metals.new-scala-file",
        "category": "Metals",
        "title": "New Scala File..."
      },
      {
        "command": "metals.new-java-file",
        "category": "Metals",
        "title": "New Java File..."
      },
      {
        "command": "metals.new-scala-worksheet",
        "category": "Metals",
        "title": "Create Worksheet"
      },
      {
        "command": "metals.open-new-github-issue",
        "category": "Metals",
        "title": "Open new github issue"
      },
      {
        "command": "metals.super-method-hierarchy",
        "category": "Metals",
        "title": "Reveal super method hierachy"
      },
      {
        "command": "metals.reset-choice",
        "category": "Metals",
        "title": "Reset Choice"
      },
      {
        "command": "metals.reset-notifications",
        "category": "Metals",
        "title": "Reset Notifications"
      },
      {
        "command": "metals.analyze-stacktrace",
        "category": "Metals",
        "title": "Analyze Stacktrace"
      },
      {
        "command": "metals.goto-super-method",
        "category": "Metals",
        "title": "Go to super method"
      },
      {
        "command": "metals.ammonite-start",
        "category": "Metals",
        "title": "Start Ammonite build server"
      },
      {
        "command": "metals.ammonite-stop",
        "category": "Metals",
        "title": "Stop Ammonite build server"
      },
      {
        "command": "metals.scala-cli-start",
        "category": "Metals",
        "title": "Start Scala CLI BSP server"
      },
      {
        "command": "metals.scala-cli-stop",
        "category": "Metals",
        "title": "Stop Scala CLI BSP server"
      },
      {
        "command": "metals.toggle-implicit-conversions-and-classes",
        "category": "Metals",
        "title": "Toggle showing implicit conversions and classes"
      },
      {
        "command": "metals.toggle-implicit-parameters",
        "category": "Metals",
        "title": "Toggle showing implicit parameters"
      },
      {
        "command": "metals.toggle-show-inferred-type",
        "category": "Metals",
        "title": "Toggle showing inferred type"
      },
      {
        "command": "metals.copy-worksheet-output",
        "category": "Metals",
        "title": "Copy worksheet output"
      },
      {
        "command": "metals.run-current-file",
        "category": "Metals",
        "title": "Run main class or tests in the current file"
      },
      {
        "command": "metals.test-current-target",
        "category": "Metals",
        "title": "Run all test in the current project"
      },
      {
        "command": "metals.symbol-search",
        "category": "Metals",
        "title": "Search symbol in workspace"
      },
      {
        "command": "metals.find-text-in-dependency-jars",
        "category": "Metals",
        "title": "Find text in dependency JAR files"
      }
    ],
    "submenus": [
      {
        "id": "metals.analyze",
        "label": "Metals Analyse Source"
      }
    ],
    "keybindings": [
      {
        "key": "ctrl+t",
        "mac": "cmd+t",
        "command": "metals.symbol-search",
        "when": "editorLangId == scala || editorLangId == java || editorLangId == sbt || editorLangId == sc"
      },
      {
        "key": "ctrl+alt+shift+o",
        "mac": "cmd+alt+shift+o",
        "command": "metals.scalafix-run",
        "when": "editorLangId == scala"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "metals.reveal-active-file",
          "group": "navigation",
          "when": "view == metalsPackages"
        }
      ],
      "commandPalette": [
        {
          "command": "metals.show-tasty",
          "when": "metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.tasty || metals:enabled && resourceExtname==.tasty-decoded || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc"
        },
        {
          "command": "metals.show-cfr",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.class || metals:enabled && resourceExtname==.cfr || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc"
        },
        {
          "command": "metals.show-javap",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.class || metals:enabled && resourceExtname==.javap || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc"
        },
        {
          "command": "metals.show-javap-verbose",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.class || metals:enabled && resourceExtname==.javap-verbose || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc"
        },
        {
          "command": "metals.show-semanticdb-compact",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.semanticdb || metals:enabled && resourceExtname==.semanticdb-compact || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc"
        },
        {
          "command": "metals.show-semanticdb-detailed",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.semanticdb || metals:enabled && resourceExtname==.semanticdb-detailed || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc"
        },
        {
          "command": "metals.show-semanticdb-proto",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.semanticdb || metals:enabled && resourceExtname==.semanticdb-proto || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc"
        },
        {
          "command": "metals.reveal-active-file",
          "when": "metals:enabled"
        },
        {
          "command": "metals.toggle-implicit-conversions-and-classes",
          "when": "metals:enabled"
        },
        {
          "command": "metals.toggle-implicit-parameters",
          "when": "metals:enabled"
        },
        {
          "command": "metals.toggle-show-inferred-type",
          "when": "metals:enabled"
        },
        {
          "command": "metals.restartServer",
          "when": "metals:enabled"
        },
        {
          "command": "metals.build-import",
          "when": "metals:enabled"
        },
        {
          "command": "metals.build-restart",
          "when": "metals:enabled"
        },
        {
          "command": "metals.build-connect",
          "when": "metals:enabled"
        },
        {
          "command": "metals.sources-scan",
          "when": "metals:enabled"
        },
        {
          "command": "metals.compile-cascade",
          "when": "metals:enabled"
        },
        {
          "command": "metals.compile-clean",
          "when": "metals:enabled"
        },
        {
          "command": "metals.compile-cancel",
          "when": "metals:enabled"
        },
        {
          "command": "metals.doctor-run",
          "when": "metals:enabled"
        },
        {
          "command": "metals.zip-reports",
          "when": "metals:enabled"
        },
        {
          "command": "metals.reset-workspace",
          "when": "metals:enabled"
        },
        {
          "command": "metals.show-release-notes",
          "when": "metals:enabled"
        },
        {
          "command": "metals.scalafix-run",
          "when": "metals:enabled"
        },
        {
          "command": "metals.scalafix-run-only",
          "when": "metals:enabled"
        },
        {
          "command": "metals.target-info-display",
          "when": "metals:enabled"
        },
        {
          "command": "metals.new-scala-file",
          "when": "metals:enabled"
        },
        {
          "command": "metals.new-java-file",
          "when": "metals:enabled"
        },
        {
          "command": "metals.new-scala-project",
          "when": "metals:enabled"
        },
        {
          "command": "metals.super-method-hierarchy",
          "when": "metals:enabled"
        },
        {
          "command": "metals.analyze-stacktrace",
          "when": "metals:enabled"
        },
        {
          "command": "metals.goto-super-method",
          "when": "metals:enabled"
        },
        {
          "command": "metals.reset-choice",
          "when": "metals:enabled"
        },
        {
          "command": "metals.reset-notifications",
          "when": "metals:enabled"
        },
        {
          "command": "metals.ammonite-start",
          "when": "metals:enabled"
        },
        {
          "command": "metals.ammonite-stop",
          "when": "metals:enabled"
        },
        {
          "command": "metals.scala-cli-start",
          "when": "metals:enabled"
        },
        {
          "command": "metals.scala-cli-stop",
          "when": "metals:enabled"
        }
      ],
      "explorer/context": [
        {
          "command": "metals.new-scala-file",
          "when": "metals:enabled",
          "group": "navigation@1"
        },
        {
          "command": "metals.new-java-file",
          "when": "metals:enabled",
          "group": "navigation@2"
        },
        {
          "submenu": "metals.analyze",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.class || metals:enabled && resourceExtname==.semanticdb || metals:enabled && resourceExtname==.tasty || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "navigation@3"
        }
      ],
      "metals.analyze": [
        {
          "command": "metals.show-tasty",
          "when": "metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.tasty || metals:enabled && resourceExtname==.tasty-decoded || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "metals-1@1"
        },
        {
          "command": "metals.show-cfr",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.class || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "metals-2@1"
        },
        {
          "command": "metals.show-javap",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.class || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "metals-3@1"
        },
        {
          "command": "metals.show-javap-verbose",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.class || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "metals-3@2"
        },
        {
          "command": "metals.show-semanticdb-compact",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.semanticdb || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "metals-4@1"
        },
        {
          "command": "metals.show-semanticdb-detailed",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.semanticdb || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "metals-4@2"
        },
        {
          "command": "metals.show-semanticdb-proto",
          "when": "metals:enabled && resourceExtname==.java || metals:enabled && resourceExtname==.scala || metals:enabled && resourceExtname==.semanticdb || metals:enabled && resourceExtname==.sbt || metals:enabled && resourceExtname==.sc",
          "group": "metals-4@3"
        }
      ],
      "view/item/context": [
        {
          "command": "metals.target-info-display",
          "when": "view == metalsPackages && viewItem == project"
        }
      ]
    },
    "breakpoints": [
      {
        "language": "scala"
      },
      {
        "language": "java"
      }
    ],
    "debuggers": [
      {
        "type": "scala",
        "label": "Scala Debugger",
        "languages": [
          "scala"
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "mainClass": {
                "type": "string",
                "description": "Name of the main class to run"
              },
              "testClass": {
                "type": "string",
                "description": "Name of the test class to run"
              },
              "buildTarget": {
                "type": "string",
                "description": "Name of the build target of the class to run, can be found in the projects section of the Metals tab"
              },
              "args": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Arguments passed to the class to run",
                "default": []
              },
              "jvmOptions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "env": {
                "type": "object",
                "items": {
                  "type": "string"
                },
                "default": {}
              },
              "envFile": {
                "type": "string",
                "description": "Name of a .env file with additional environment variables",
                "default": null
              }
            }
          },
          "attach": {
            "properties": {
              "buildTarget": {
                "type": "string",
                "description": "Name of the build target to debug"
              },
              "hostName": {
                "type": "string",
                "description": "Host name of the debuggee JVM"
              },
              "port": {
                "type": "number",
                "description": "Port to attach to"
              }
            }
          }
        },
        "configurationSnippets": [
          {
            "label": "Scala: Run main class",
            "description": "A new configuration for running a debug session of a main class",
            "body": {
              "type": "scala",
              "request": "launch",
              "name": "Untitled",
              "mainClass": "???",
              "args": [],
              "jvmOptions": [],
              "env": {}
            }
          },
          {
            "label": "Scala: Run test class",
            "description": "A new configuration for running a debug session of a test class",
            "body": {
              "type": "scala",
              "request": "launch",
              "name": "Untitled",
              "testClass": "???"
            }
          },
          {
            "label": "Scala: Attach debugger",
            "description": "A new configuration for running a debug session of a remote JVM",
            "body": {
              "type": "scala",
              "request": "attach",
              "name": "Untitled",
              "buildTarget": "???",
              "hostName": "localhost",
              "port": 5005
            }
          },
          {
            "label": "Scala: Play framework prod server",
            "description": "A new configuration for running a production Play framework production server",
            "body": {
              "type": "scala",
              "request": "launch",
              "name": "Play main",
              "mainClass": "play.core.server.ProdServerStart",
              "args": [],
              "jvmOptions": [],
              "buildTarget": "???"
            }
          }
        ]
      }
    ]
  },
  "main": "./out/extension",
  "scripts": {
    "vscode:prepublish": "yarn compile",
    "compile": "tsc -p ./",
    "clean": "rimraf out/",
    "watch": "tsc -watch -p ./",
    "test": "ts-mocha src/test/unit/*.test.ts",
    "test-extension": "rimraf out/ && tsc -p ./ && node out/test/extension/runTest.js",
    "build": "yarn clean && vsce package --yarn",
    "vscode:publish": "vsce publish --yarn",
    "ovsx:publish": "ovsx publish",
    "lint": "eslint . --ext .ts --fix && yarn format",
    "format": "prettier --write **/*.{ts,js,json}",
    "format-check": "prettier --check **/*.{ts,js,json}"
  },
  "devDependencies": {
    "@sourcegraph/scip-typescript": "^0.3.7",
    "@types/chai": "^4.3.4",
    "@types/glob": "^8.1.0",
    "@types/marked": "^4.0.8",
    "@types/mocha": "^10.0.1",
    "@types/node": "18.15.5",
    "@types/semver": "^7.3.13",
    "@types/sinon": "^10.0.13",
    "@types/vscode": "1.59.0",
    "@typescript-eslint/eslint-plugin": "^5.56.0",
    "@typescript-eslint/parser": "^5.56.0",
    "@vscode/test-electron": "^2.3.0",
    "@vscode/vsce": "^2.19.0",
    "chai": "^4.3.7",
    "eslint": "^8.36.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-mocha": "^10.1.0",
    "glob": "^9.3.1",
    "mkdirp": "2.1.5",
    "mocha": "^10.2.0",
    "ovsx": "0.8.0",
    "prettier": "2.8.5",
    "rimraf": "^4.4.0",
    "sinon": "^15.0.2",
    "ts-mocha": "^10.0.0",
    "typescript": "5.0.2"
  },
  "dependencies": {
    "ansicolor": "^1.1.100",
    "marked": "^4.2.12",
    "metals-languageclient": "file:../metals-languageclient",
    "promisify-child-process": "4.1.1",
    "semver": "^7.5.2",
    "vscode-languageclient": "8.1.0"
  },
  "extensionPack": [
    "scala-lang.scala"
  ]
}
